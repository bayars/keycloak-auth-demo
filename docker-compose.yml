services:
  postgres:
    image: postgres:15
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:26.4
    container_name: keycloak
    command: start
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_PROXY_HEADERS: xforwarded
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  api:
    build: ./backend
    container_name: backend-api
    environment:
      KEYCLOAK_URL: http://keycloak:8080/auth
      KEYCLOAK_REALM: lab-test2
      CLIENT_ID: myapp
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build: .
    container_name: keycloak-gui
    networks:
      - app-network
    restart: unless-stopped

  haproxy:
    image: haproxy:2.9
    container_name: haproxy
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./haproxy/certs:/etc/haproxy/certs:ro
    ports:
      - "443:443"
      - "8404:8404"
    depends_on:
      - keycloak
      - api
      - frontend
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
